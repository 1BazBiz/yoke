#!/usr/bin/python3
import yoke
from yoke import EVENTS
import argparse

class GamepadService(yoke.Service):
    events = yoke.GAMEPAD_EVENTS

    def make_events(self, v):
        # import pdb; pdb.set_trace()

        e = []
        for i in range(len(yoke.GAMEPAD_EVENTS)):
            e.append((yoke.GAMEPAD_EVENTS[i], v[i]))

        '''
        e = (
            (EVENTS.ABS_HAT0X, v[0]),
            (EVENTS.ABS_HAT0Y, v[1]),
            (EVENTS.ABS_RX,    v[2]),
            (EVENTS.ABS_RY,    v[3]),
            (EVENTS.ABS_X,     v[4]),
            (EVENTS.ABS_Y,     v[5]),
            (EVENTS.BTN_DPAD_DOWN, v[6]),
            (EVENTS.BTN_DPAD_RIGHT, v[7]),
            (EVENTS.BTN_DPAD_LEFT, v[8]),
            (EVENTS.BTN_DPAD_UP, v[9]),
            )
        '''
        return tuple(e)

parser = argparse.ArgumentParser()
parser.add_argument('--name', type=str, default='Yoke', help='virtual device name')
parser.add_argument('--id', type=int, default=1, help='virtual device id (an integer larger than 0 in case there are multiple virtual devices)')
parser.add_argument('--iface', type=str, default='auto', help='IP of network interface (card) to listen on')
parser.add_argument('--port', type=int, default=0, help='port to listen on')
args = parser.parse_args()

Service = GamepadService
dev = yoke.Device(args.id, args.name, events=Service.events)
service = Service(dev, args.iface, args.port)

try:
    print('Starting service... Press Ctrl+C to exit.')
    service.run()
except KeyboardInterrupt:
    pass
finally:
    print("Shutting down...")
    service.close()
